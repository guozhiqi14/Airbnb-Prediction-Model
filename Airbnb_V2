{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from pandas.tools.plotting import scatter_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "path = '/Users/guozhiqi-seven/Google Drive/NYU Master/Intro to DS/Airbnb Project/listings.csv'\n",
    "df = pd.read_csv(path)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(38810, 95)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "useful_cols = ['accommodates',\n",
    "               'bathrooms',\n",
    "               'bedrooms',\n",
    "               'beds',\n",
    "               'number_of_reviews',\n",
    "               'cancellation_policy',\n",
    "               'reviews_per_month',\n",
    "               'neighbourhood_cleansed',\n",
    "               'neighbourhood_group_cleansed',\n",
    "               'instant_bookable',\n",
    "               'review_scores_rating',\n",
    "               'room_type',\n",
    "               'host_identity_verified',\n",
    "               'price']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>cancellation_policy</th>\n",
       "      <th>reviews_per_month</th>\n",
       "      <th>neighbourhood_cleansed</th>\n",
       "      <th>neighbourhood_group_cleansed</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>review_scores_rating</th>\n",
       "      <th>room_type</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>moderate</td>\n",
       "      <td>0.75</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>1</td>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>flexible</td>\n",
       "      <td>0.82</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>0</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>1</td>\n",
       "      <td>125.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>flexible</td>\n",
       "      <td>4.57</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>1</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>1</td>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>strict</td>\n",
       "      <td>0.00</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>0</td>\n",
       "      <td>300.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>59</td>\n",
       "      <td>moderate</td>\n",
       "      <td>4.36</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>1</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>1</td>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   accommodates  bathrooms  bedrooms  beds  number_of_reviews  \\\n",
       "0             2        1.0       1.0   1.0                 15   \n",
       "1             3        1.0       1.0   1.0                 10   \n",
       "2             4        1.0       1.0   2.0                 16   \n",
       "3             4        3.0       3.0   3.0                  0   \n",
       "4             4        1.0       1.0   1.0                 59   \n",
       "\n",
       "  cancellation_policy  reviews_per_month neighbourhood_cleansed  \\\n",
       "0            moderate               0.75            City Island   \n",
       "1            flexible               0.82            City Island   \n",
       "2            flexible               4.57            City Island   \n",
       "3              strict               0.00            City Island   \n",
       "4            moderate               4.36            City Island   \n",
       "\n",
       "  neighbourhood_group_cleansed  instant_bookable  review_scores_rating  \\\n",
       "0                        Bronx                 0                  92.0   \n",
       "1                        Bronx                 0                  92.0   \n",
       "2                        Bronx                 1                  98.0   \n",
       "3                        Bronx                 0                   0.0   \n",
       "4                        Bronx                 1                  97.0   \n",
       "\n",
       "         room_type  host_identity_verified  price  \n",
       "0     Private room                       1   65.0  \n",
       "1  Entire home/apt                       1  125.0  \n",
       "2  Entire home/apt                       1   79.0  \n",
       "3  Entire home/apt                       0  300.0  \n",
       "4     Private room                       1   59.0  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df[useful_cols]\n",
    "df.head(5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "'''convert price from object to float '''\n",
    "\n",
    "df['price'] = df['price'].str.replace('$', '')\n",
    "df['price'] = df['price'].str.replace(',', '')\n",
    "df['price'] = df['price'].astype(float) \n",
    "'''fill all NaN value in features by 0 (convert to 0 but do not drop NaN value instance)'''\n",
    "df['reviews_per_month'] .fillna(0 , inplace = True)\n",
    "df['review_scores_rating'] .fillna(0 , inplace = True)\n",
    "df['bathrooms'] .fillna(0 , inplace = True)\n",
    "df['bedrooms'] .fillna(0 , inplace = True)\n",
    "df['beds'] .fillna(0 , inplace = True) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>cancellation_policy</th>\n",
       "      <th>reviews_per_month</th>\n",
       "      <th>neighbourhood_cleansed</th>\n",
       "      <th>neighbourhood_group_cleansed</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>review_scores_rating</th>\n",
       "      <th>room_type</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>price</th>\n",
       "      <th>manhattan</th>\n",
       "      <th>brooklyn</th>\n",
       "      <th>queens</th>\n",
       "      <th>bronx/si</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>moderate</td>\n",
       "      <td>0.75</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>flexible</td>\n",
       "      <td>0.82</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "      <td>125.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>flexible</td>\n",
       "      <td>4.57</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>t</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "      <td>79.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>strict</td>\n",
       "      <td>0.00</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "      <td>300.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>59</td>\n",
       "      <td>moderate</td>\n",
       "      <td>4.36</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>t</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "      <td>59.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   accommodates  bathrooms  bedrooms  beds  number_of_reviews  \\\n",
       "0             2        1.0       1.0   1.0                 15   \n",
       "1             3        1.0       1.0   1.0                 10   \n",
       "2             4        1.0       1.0   2.0                 16   \n",
       "3             4        3.0       3.0   3.0                  0   \n",
       "4             4        1.0       1.0   1.0                 59   \n",
       "\n",
       "  cancellation_policy  reviews_per_month neighbourhood_cleansed  \\\n",
       "0            moderate               0.75            City Island   \n",
       "1            flexible               0.82            City Island   \n",
       "2            flexible               4.57            City Island   \n",
       "3              strict               0.00            City Island   \n",
       "4            moderate               4.36            City Island   \n",
       "\n",
       "  neighbourhood_group_cleansed instant_bookable  review_scores_rating  \\\n",
       "0                        Bronx                f                  92.0   \n",
       "1                        Bronx                f                  92.0   \n",
       "2                        Bronx                t                  98.0   \n",
       "3                        Bronx                f                   0.0   \n",
       "4                        Bronx                t                  97.0   \n",
       "\n",
       "         room_type host_identity_verified  price  manhattan  brooklyn  queens  \\\n",
       "0     Private room                      t   65.0          0         0       0   \n",
       "1  Entire home/apt                      t  125.0          0         0       0   \n",
       "2  Entire home/apt                      t   79.0          0         0       0   \n",
       "3  Entire home/apt                      f  300.0          0         0       0   \n",
       "4     Private room                      t   59.0          0         0       0   \n",
       "\n",
       "   bronx/si  \n",
       "0         1  \n",
       "1         1  \n",
       "2         1  \n",
       "3         1  \n",
       "4         1  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['manhattan'] = np.where(df['neighbourhood_group_cleansed']=='Manhattan', 1, 0)\n",
    "df['brooklyn'] = np.where(df['neighbourhood_group_cleansed']=='Brooklyn', 1, 0)\n",
    "df['queens'] = np.where(df['neighbourhood_group_cleansed']=='Queens', 1, 0)\n",
    "df['bronx/si'] = np.where((df['neighbourhood_group_cleansed']=='Staten Island'), 1, 0)\n",
    "df['temp'] = np.where((df['neighbourhood_group_cleansed']=='Bronx'), 1, 0)\n",
    "df['bronx/si'] = df['bronx/si']+df['temp']\n",
    "df = df.drop(['temp'],axis=1)\n",
    "df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "How the binning prices distributed:\n",
      " [$10-65]        8047\n",
      "[$65-95]        7851\n",
      "[$197-10000]    7757\n",
      "[$130-197]      7667\n",
      "[$95-130]       7488\n",
      "Name: price_binning, dtype: int64\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>cancellation_policy</th>\n",
       "      <th>reviews_per_month</th>\n",
       "      <th>neighbourhood_cleansed</th>\n",
       "      <th>neighbourhood_group_cleansed</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>review_scores_rating</th>\n",
       "      <th>room_type</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>price</th>\n",
       "      <th>manhattan</th>\n",
       "      <th>brooklyn</th>\n",
       "      <th>queens</th>\n",
       "      <th>bronx/si</th>\n",
       "      <th>price_binning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>moderate</td>\n",
       "      <td>0.75</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$10-65]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>flexible</td>\n",
       "      <td>0.82</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "      <td>125.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$95-130]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>flexible</td>\n",
       "      <td>4.57</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>t</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "      <td>79.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$65-95]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>strict</td>\n",
       "      <td>0.00</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "      <td>300.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$197-10000]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>59</td>\n",
       "      <td>moderate</td>\n",
       "      <td>4.36</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>t</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "      <td>59.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$10-65]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   accommodates  bathrooms  bedrooms  beds  number_of_reviews  \\\n",
       "0             2        1.0       1.0   1.0                 15   \n",
       "1             3        1.0       1.0   1.0                 10   \n",
       "2             4        1.0       1.0   2.0                 16   \n",
       "3             4        3.0       3.0   3.0                  0   \n",
       "4             4        1.0       1.0   1.0                 59   \n",
       "\n",
       "  cancellation_policy  reviews_per_month neighbourhood_cleansed  \\\n",
       "0            moderate               0.75            City Island   \n",
       "1            flexible               0.82            City Island   \n",
       "2            flexible               4.57            City Island   \n",
       "3              strict               0.00            City Island   \n",
       "4            moderate               4.36            City Island   \n",
       "\n",
       "  neighbourhood_group_cleansed instant_bookable  review_scores_rating  \\\n",
       "0                        Bronx                f                  92.0   \n",
       "1                        Bronx                f                  92.0   \n",
       "2                        Bronx                t                  98.0   \n",
       "3                        Bronx                f                   0.0   \n",
       "4                        Bronx                t                  97.0   \n",
       "\n",
       "         room_type host_identity_verified  price  manhattan  brooklyn  queens  \\\n",
       "0     Private room                      t   65.0          0         0       0   \n",
       "1  Entire home/apt                      t  125.0          0         0       0   \n",
       "2  Entire home/apt                      t   79.0          0         0       0   \n",
       "3  Entire home/apt                      f  300.0          0         0       0   \n",
       "4     Private room                      t   59.0          0         0       0   \n",
       "\n",
       "   bronx/si price_binning  \n",
       "0         1      [$10-65]  \n",
       "1         1     [$95-130]  \n",
       "2         1      [$65-95]  \n",
       "3         1  [$197-10000]  \n",
       "4         1      [$10-65]  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Binning the listing price to 5 price interval, each price interval has approximately same nubmer of instance'''\n",
    "\n",
    "labels = [\"[$10-65]\",\"[$65-95]\",\"[$95-130]\",\"[$130-197]\",\"[$197-10000]\"]\n",
    "df['price_binning'] = pd.qcut(df['price'], 5 ,labels = labels )\n",
    "print('How the binning prices distributed:\\n',df['price_binning'].value_counts())\n",
    "df.head(5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>cancellation_policy</th>\n",
       "      <th>reviews_per_month</th>\n",
       "      <th>neighbourhood_cleansed</th>\n",
       "      <th>neighbourhood_group_cleansed</th>\n",
       "      <th>instant_bookable</th>\n",
       "      <th>review_scores_rating</th>\n",
       "      <th>room_type</th>\n",
       "      <th>host_identity_verified</th>\n",
       "      <th>price</th>\n",
       "      <th>manhattan</th>\n",
       "      <th>brooklyn</th>\n",
       "      <th>queens</th>\n",
       "      <th>bronx/si</th>\n",
       "      <th>price_binning</th>\n",
       "      <th>price_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>15</td>\n",
       "      <td>moderate</td>\n",
       "      <td>0.75</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "      <td>65.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$10-65]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>10</td>\n",
       "      <td>flexible</td>\n",
       "      <td>0.82</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>92.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "      <td>125.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$95-130]</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>16</td>\n",
       "      <td>flexible</td>\n",
       "      <td>4.57</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>t</td>\n",
       "      <td>98.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>t</td>\n",
       "      <td>79.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$65-95]</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>strict</td>\n",
       "      <td>0.00</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>f</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Entire home/apt</td>\n",
       "      <td>f</td>\n",
       "      <td>300.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$197-10000]</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>59</td>\n",
       "      <td>moderate</td>\n",
       "      <td>4.36</td>\n",
       "      <td>City Island</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>t</td>\n",
       "      <td>97.0</td>\n",
       "      <td>Private room</td>\n",
       "      <td>t</td>\n",
       "      <td>59.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>[$10-65]</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   accommodates  bathrooms  bedrooms  beds  number_of_reviews  \\\n",
       "0             2        1.0       1.0   1.0                 15   \n",
       "1             3        1.0       1.0   1.0                 10   \n",
       "2             4        1.0       1.0   2.0                 16   \n",
       "3             4        3.0       3.0   3.0                  0   \n",
       "4             4        1.0       1.0   1.0                 59   \n",
       "\n",
       "  cancellation_policy  reviews_per_month neighbourhood_cleansed  \\\n",
       "0            moderate               0.75            City Island   \n",
       "1            flexible               0.82            City Island   \n",
       "2            flexible               4.57            City Island   \n",
       "3              strict               0.00            City Island   \n",
       "4            moderate               4.36            City Island   \n",
       "\n",
       "  neighbourhood_group_cleansed instant_bookable  review_scores_rating  \\\n",
       "0                        Bronx                f                  92.0   \n",
       "1                        Bronx                f                  92.0   \n",
       "2                        Bronx                t                  98.0   \n",
       "3                        Bronx                f                   0.0   \n",
       "4                        Bronx                t                  97.0   \n",
       "\n",
       "         room_type host_identity_verified  price  manhattan  brooklyn  queens  \\\n",
       "0     Private room                      t   65.0          0         0       0   \n",
       "1  Entire home/apt                      t  125.0          0         0       0   \n",
       "2  Entire home/apt                      t   79.0          0         0       0   \n",
       "3  Entire home/apt                      f  300.0          0         0       0   \n",
       "4     Private room                      t   59.0          0         0       0   \n",
       "\n",
       "   bronx/si price_binning  price_class  \n",
       "0         1      [$10-65]            1  \n",
       "1         1     [$95-130]            3  \n",
       "2         1      [$65-95]            2  \n",
       "3         1  [$197-10000]            5  \n",
       "4         1      [$10-65]            1  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['price_class'] = np.where(df['price_binning']==\"[$10-65]\", 1, 0)\n",
    "df['price_class'][df['price_binning']==\"[$65-95]\"] = 2\n",
    "df['price_class'][df['price_binning']==\"[$95-130]\"] = 3\n",
    "df['price_class'][df['price_binning']==\"[$130-197]\"] = 4\n",
    "df['price_class'][df['price_binning']==\"[$197-10000]\"] = 5\n",
    "df.head(5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cancellation_policy : object\n",
      "neighbourhood_cleansed : object\n",
      "neighbourhood_group_cleansed : object\n",
      "instant_bookable : object\n",
      "room_type : object\n",
      "host_identity_verified : object\n"
     ]
    }
   ],
   "source": [
    "'''features which need to be convert to dummy variables'''\n",
    "\n",
    "for i in useful_cols:\n",
    "    if df[i].dtypes == object:\n",
    "        print(i,':',df[i].dtypes) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "df['cp_flexible'] = np.where(df['cancellation_policy']==\"flexible\", 1, 0)\n",
    "df['cp_moderate'] = np.where(df['cancellation_policy']==\"moderate\", 1, 0)\n",
    "df['cp_strict'] = np.where(df['cancellation_policy']==\"strict\", 1, 0)  #fix typo\n",
    "df['instant_bookable'] = np.where(df['instant_bookable']==\"t\", 1, 0) \n",
    "df['entire_or_not'] = np.where(df['room_type']==\"Entire home/apt\", 1, 0)\n",
    "df['host_identity_verified'] = np.where(df['host_identity_verified']==\"t\", 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "'''find out all neighbourhood location where the occurence is below threshold  '''\n",
    "threshold = 200\n",
    "grp = df.groupby(['neighbourhood_cleansed']) \n",
    "index_2_del = grp.filter(lambda x: len(x) <= threshold).index "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(33648, 24)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''In order to increase the performance and the accuracy of our classification, drop all instances which \n",
    "   the neighbourhood location occur less than 'threshold' times in the dataset. '''\n",
    "alldata = df.copy() \n",
    "alldata.drop(alldata.index[index_2_del],inplace=True) \n",
    "alldata.shape    #now alldata is the dataset without all instances occur blow threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Astoria</th>\n",
       "      <th>Bedford-Stuyvesant</th>\n",
       "      <th>Bushwick</th>\n",
       "      <th>Carroll Gardens</th>\n",
       "      <th>Chelsea</th>\n",
       "      <th>Chinatown</th>\n",
       "      <th>Clinton Hill</th>\n",
       "      <th>Crown Heights</th>\n",
       "      <th>Ditmars Steinway</th>\n",
       "      <th>East Harlem</th>\n",
       "      <th>...</th>\n",
       "      <th>Ridgewood</th>\n",
       "      <th>SoHo</th>\n",
       "      <th>South Slope</th>\n",
       "      <th>Sunnyside</th>\n",
       "      <th>Sunset Park</th>\n",
       "      <th>Upper East Side</th>\n",
       "      <th>Upper West Side</th>\n",
       "      <th>Washington Heights</th>\n",
       "      <th>West Village</th>\n",
       "      <th>Williamsburg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Astoria  Bedford-Stuyvesant  Bushwick  Carroll Gardens  Chelsea  \\\n",
       "29      0.0                 0.0       0.0              0.0      0.0   \n",
       "30      0.0                 0.0       0.0              0.0      0.0   \n",
       "31      0.0                 0.0       0.0              0.0      0.0   \n",
       "\n",
       "    Chinatown  Clinton Hill  Crown Heights  Ditmars Steinway  East Harlem  \\\n",
       "29        0.0           0.0            0.0               1.0          0.0   \n",
       "30        0.0           0.0            0.0               1.0          0.0   \n",
       "31        0.0           0.0            0.0               1.0          0.0   \n",
       "\n",
       "        ...       Ridgewood  SoHo  South Slope  Sunnyside  Sunset Park  \\\n",
       "29      ...             0.0   0.0          0.0        0.0          0.0   \n",
       "30      ...             0.0   0.0          0.0        0.0          0.0   \n",
       "31      ...             0.0   0.0          0.0        0.0          0.0   \n",
       "\n",
       "    Upper East Side  Upper West Side  Washington Heights  West Village  \\\n",
       "29              0.0              0.0                 0.0           0.0   \n",
       "30              0.0              0.0                 0.0           0.0   \n",
       "31              0.0              0.0                 0.0           0.0   \n",
       "\n",
       "    Williamsburg  \n",
       "29           0.0  \n",
       "30           0.0  \n",
       "31           0.0  \n",
       "\n",
       "[3 rows x 40 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''get dummies for all neighbourhood_cleansed'''\n",
    "nc_dummy = pd.get_dummies(alldata['neighbourhood_cleansed'])        #neighbourhood_cleansed\n",
    "nc_dummy.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(33648, 16)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Index(['accommodates', 'bathrooms', 'bedrooms', 'beds', 'number_of_reviews',\n",
       "       'reviews_per_month', 'review_scores_rating', 'manhattan', 'brooklyn',\n",
       "       'queens', 'bronx/si', 'price_class', 'cp_flexible', 'cp_moderate',\n",
       "       'cp_strict', 'entire_or_not'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Drop all original categorical columns '''\n",
    "drop_cols = ['cancellation_policy','neighbourhood_cleansed','neighbourhood_group_cleansed',\n",
    "             'room_type','host_identity_verified','instant_bookable','price','price_binning']\n",
    "alldata=alldata.drop(drop_cols,axis = 1) \n",
    "print(alldata.shape) \n",
    "alldata.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(33648, 56)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Join dataset with the dummy_variable matrix'''\n",
    "frames = [alldata,nc_dummy.astype(int)]\n",
    "alldata = pd.concat(frames,axis=1)\n",
    "alldata.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>accommodates</th>\n",
       "      <th>bathrooms</th>\n",
       "      <th>bedrooms</th>\n",
       "      <th>beds</th>\n",
       "      <th>number_of_reviews</th>\n",
       "      <th>reviews_per_month</th>\n",
       "      <th>review_scores_rating</th>\n",
       "      <th>manhattan</th>\n",
       "      <th>brooklyn</th>\n",
       "      <th>queens</th>\n",
       "      <th>...</th>\n",
       "      <th>Ridgewood</th>\n",
       "      <th>SoHo</th>\n",
       "      <th>South Slope</th>\n",
       "      <th>Sunnyside</th>\n",
       "      <th>Sunset Park</th>\n",
       "      <th>Upper East Side</th>\n",
       "      <th>Upper West Side</th>\n",
       "      <th>Washington Heights</th>\n",
       "      <th>West Village</th>\n",
       "      <th>Williamsburg</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.00</td>\n",
       "      <td>100.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>23</td>\n",
       "      <td>2.41</td>\n",
       "      <td>92.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>2</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5</td>\n",
       "      <td>1.21</td>\n",
       "      <td>85.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    accommodates  bathrooms  bedrooms  beds  number_of_reviews  \\\n",
       "29             4        1.0       2.0   2.0                  0   \n",
       "30             2        1.0       1.0   1.0                  1   \n",
       "31             1        1.0       1.0   1.0                  0   \n",
       "32             1        1.0       1.0   1.0                 23   \n",
       "33             2        1.0       1.0   1.0                  5   \n",
       "\n",
       "    reviews_per_month  review_scores_rating  manhattan  brooklyn  queens  \\\n",
       "29               0.00                   0.0          0         0       1   \n",
       "30               1.00                 100.0          0         0       1   \n",
       "31               0.00                   0.0          0         0       1   \n",
       "32               2.41                  92.0          0         0       1   \n",
       "33               1.21                  85.0          0         0       1   \n",
       "\n",
       "        ...       Ridgewood  SoHo  South Slope  Sunnyside  Sunset Park  \\\n",
       "29      ...               0     0            0          0            0   \n",
       "30      ...               0     0            0          0            0   \n",
       "31      ...               0     0            0          0            0   \n",
       "32      ...               0     0            0          0            0   \n",
       "33      ...               0     0            0          0            0   \n",
       "\n",
       "    Upper East Side  Upper West Side  Washington Heights  West Village  \\\n",
       "29                0                0                   0             0   \n",
       "30                0                0                   0             0   \n",
       "31                0                0                   0             0   \n",
       "32                0                0                   0             0   \n",
       "33                0                0                   0             0   \n",
       "\n",
       "    Williamsburg  \n",
       "29             0  \n",
       "30             0  \n",
       "31             0  \n",
       "32             0  \n",
       "33             0  \n",
       "\n",
       "[5 rows x 56 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alldata.head(5) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "'''split train and test by 80/20'''\n",
    "X_train, X_test, y_train, y_test = train_test_split(alldata.drop('price_class', axis=1),alldata['price_class'], test_size=0.2, random_state=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import roc_curve, auc,roc_auc_score\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "t1 = time.clock()\n",
    "LogReg = LogisticRegression(C=1e30)\n",
    "LogReg = LogReg.fit(X_train,y_train)\n",
    "#SVM = SVC(kernel=\"linear\")\n",
    "#SVM = SVM.fit(X_train,y_train) \n",
    "#SVM_prediction = SVM.decision_function(X_test) \n",
    "#LogReg_prediction = LogReg.predict_proba(X_test)[:,1] \n",
    "#result = [LogReg.score(X_test,y_test),SVM.score(X_test,y_test)] \n",
    "result = [LogReg.score(X_test,y_test)] \n",
    "\n",
    "t2 = time.clock() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "run time:2.134968 s\n"
     ]
    }
   ],
   "source": [
    "print (\"run time:%f s\" % (t2 -t1))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.51515601783060916]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best_LR:  0.522215617802\n",
      "best_estimator:  Pipeline(steps=[('polyfeat', PolynomialFeatures(degree=2, include_bias=True, interaction_only=False)), ('lr', LogisticRegression(C=1, class_weight=None, dual=False, fit_intercept=True,\n",
      "          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n",
      "          penalty='l1', random_state=None, solver='liblinear', tol=0.0001,\n",
      "          verbose=0, warm_start=False))])\n",
      "run time for tunning:4599.756861 s\n"
     ]
    }
   ],
   "source": [
    "'''Since generally LR takes much shorter time than SVM algorithm, for time efficiency purpose,\n",
    "   we try to increase LR classifier's performance by normalizing features and tuning the parameter'''\n",
    "\n",
    "from sklearn.grid_search import GridSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "t3 = time.clock()\n",
    "\n",
    "steps = [('polyfeat', PolynomialFeatures()),\n",
    "         #('scaler', StandardScaler()),\n",
    "         ('lr', LogisticRegression())] \n",
    "\n",
    "#set up the pipeline\n",
    "pipeline = Pipeline(steps) \n",
    "\n",
    "parameters = dict(lr__C = [10**i for i in range(-5,5)], \n",
    "                           polyfeat__degree = [1,2],\n",
    "                           polyfeat__interaction_only = [True,False],\n",
    "                           lr__penalty = ['l1', 'l2'])\n",
    "\n",
    "\n",
    "LR_grid_search = GridSearchCV(pipeline, param_grid = parameters, cv = 3, scoring = 'accuracy') \n",
    "LR_grid_search.fit(X_train, y_train)\n",
    "\n",
    "\n",
    "#get the score of the best model and print it\n",
    "best_LR = LR_grid_search.best_score_\n",
    "print('best_LR: ',best_LR) \n",
    "\n",
    "best_estimator = LR_grid_search.best_estimator_\n",
    "print('best_estimator: ',best_estimator) \n",
    "t4 = time.clock() \n",
    "\n",
    "print (\"run time for tunning:%f s\" % (t4-t3))   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
